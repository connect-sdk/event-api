// Code generated by counterfeiter. DO NOT EDIT.
package eventv1fake

import (
	"context"
	"sync"

	eventv1 "github.com/connect-sdk/event-api/proto/cloud/event/v1"
)

type FakeEventService struct {
	PushEventStub        func(context.Context, *eventv1.PushEventRequest) (*eventv1.PushEventResponse, error)
	pushEventMutex       sync.RWMutex
	pushEventArgsForCall []struct {
		arg1 context.Context
		arg2 *eventv1.PushEventRequest
	}
	pushEventReturns struct {
		result1 *eventv1.PushEventResponse
		result2 error
	}
	pushEventReturnsOnCall map[int]struct {
		result1 *eventv1.PushEventResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventService) PushEvent(arg1 context.Context, arg2 *eventv1.PushEventRequest) (*eventv1.PushEventResponse, error) {
	fake.pushEventMutex.Lock()
	ret, specificReturn := fake.pushEventReturnsOnCall[len(fake.pushEventArgsForCall)]
	fake.pushEventArgsForCall = append(fake.pushEventArgsForCall, struct {
		arg1 context.Context
		arg2 *eventv1.PushEventRequest
	}{arg1, arg2})
	stub := fake.PushEventStub
	fakeReturns := fake.pushEventReturns
	fake.recordInvocation("PushEvent", []interface{}{arg1, arg2})
	fake.pushEventMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEventService) PushEventCallCount() int {
	fake.pushEventMutex.RLock()
	defer fake.pushEventMutex.RUnlock()
	return len(fake.pushEventArgsForCall)
}

func (fake *FakeEventService) PushEventCalls(stub func(context.Context, *eventv1.PushEventRequest) (*eventv1.PushEventResponse, error)) {
	fake.pushEventMutex.Lock()
	defer fake.pushEventMutex.Unlock()
	fake.PushEventStub = stub
}

func (fake *FakeEventService) PushEventArgsForCall(i int) (context.Context, *eventv1.PushEventRequest) {
	fake.pushEventMutex.RLock()
	defer fake.pushEventMutex.RUnlock()
	argsForCall := fake.pushEventArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEventService) PushEventReturns(result1 *eventv1.PushEventResponse, result2 error) {
	fake.pushEventMutex.Lock()
	defer fake.pushEventMutex.Unlock()
	fake.PushEventStub = nil
	fake.pushEventReturns = struct {
		result1 *eventv1.PushEventResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeEventService) PushEventReturnsOnCall(i int, result1 *eventv1.PushEventResponse, result2 error) {
	fake.pushEventMutex.Lock()
	defer fake.pushEventMutex.Unlock()
	fake.PushEventStub = nil
	if fake.pushEventReturnsOnCall == nil {
		fake.pushEventReturnsOnCall = make(map[int]struct {
			result1 *eventv1.PushEventResponse
			result2 error
		})
	}
	fake.pushEventReturnsOnCall[i] = struct {
		result1 *eventv1.PushEventResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeEventService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pushEventMutex.RLock()
	defer fake.pushEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eventv1.EventService = new(FakeEventService)
