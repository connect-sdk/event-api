// Code generated by counterfeiter. DO NOT EDIT.
package eventv1fake

import (
	"context"
	"sync"

	eventv1 "github.com/connect-sdk/event-api/proto/connect/event/v1"
)

type FakeEventHandler struct {
	HandleEventStub        func(context.Context, *eventv1.Event) error
	handleEventMutex       sync.RWMutex
	handleEventArgsForCall []struct {
		arg1 context.Context
		arg2 *eventv1.Event
	}
	handleEventReturns struct {
		result1 error
	}
	handleEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventHandler) HandleEvent(arg1 context.Context, arg2 *eventv1.Event) error {
	fake.handleEventMutex.Lock()
	ret, specificReturn := fake.handleEventReturnsOnCall[len(fake.handleEventArgsForCall)]
	fake.handleEventArgsForCall = append(fake.handleEventArgsForCall, struct {
		arg1 context.Context
		arg2 *eventv1.Event
	}{arg1, arg2})
	stub := fake.HandleEventStub
	fakeReturns := fake.handleEventReturns
	fake.recordInvocation("HandleEvent", []interface{}{arg1, arg2})
	fake.handleEventMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEventHandler) HandleEventCallCount() int {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	return len(fake.handleEventArgsForCall)
}

func (fake *FakeEventHandler) HandleEventCalls(stub func(context.Context, *eventv1.Event) error) {
	fake.handleEventMutex.Lock()
	defer fake.handleEventMutex.Unlock()
	fake.HandleEventStub = stub
}

func (fake *FakeEventHandler) HandleEventArgsForCall(i int) (context.Context, *eventv1.Event) {
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	argsForCall := fake.handleEventArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEventHandler) HandleEventReturns(result1 error) {
	fake.handleEventMutex.Lock()
	defer fake.handleEventMutex.Unlock()
	fake.HandleEventStub = nil
	fake.handleEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventHandler) HandleEventReturnsOnCall(i int, result1 error) {
	fake.handleEventMutex.Lock()
	defer fake.handleEventMutex.Unlock()
	fake.HandleEventStub = nil
	if fake.handleEventReturnsOnCall == nil {
		fake.handleEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleEventMutex.RLock()
	defer fake.handleEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eventv1.EventHandler = new(FakeEventHandler)
